{
  "$schema":"http://json-schema.org/draft-04/schema#",
  "description":" h2server configuration",
  "title":"h2server_configuration",
  "type":"object",
  "properties":{
    "address":{
      "description":"IP address",
      "default": "0.0.0.0",
      "type":"string"
    },
    "port":{
      "description":"port, 80, 443 ,etc.",
      "default": 80,
      "type":"integer"
    },
    "threads":{
      "description":"Number of threads. Recommendation: thead number matches number of cores",
      "default": 1,
      "type":"integer"
    },
    "private-key-file":{
      "description":"path to private key file",
      "type":"string"
    },
    "cert-file":{
      "description":"path to private key file",
      "type":"string"
    },
    "Service":{
      "description":"service is a list of Request and Response pairs. Each response is associated with a Request, while the Request specifies the pattern the incoming request message should have, and if the incoming request matches the specified pattern, the corresponding Response is returned as the response of the incoming request message",
      "type":"array",
      "minItems":1,
      "items": {
        "type": "object",
        "description":"A pair of Request and Response",
        "properties":{
          "Request":{
            "description": "Request specifies the desired pattern that a incoming request message should have, which includes a match of :path header, and optionally a list of matches of Json payload; if a request message passes the path match as well as the payload match, then the corresponding content specified by Response would be returned as the response",
            "type":"object",
            "properties":{
              "path":{
                "description": "Match to be executed against the received :path header",
                "type": "object",
                "properties":{
                  "matchType":{
                    "type":"string",
                    "description": "Type of match action",
                    "enum": ["EqualsTo", "StartsWith", "EndsWith", "Contains"]
                  },
                  "input":{
                    "description": "Content used to execute the matchType above against the received path; i.e., received :path header should either equal to or start with or end with or contain the content specified in this field",
                    "type":"string"
                  }
                }
              },
              "payload": {
                "description": "Array of matches to be executed against the received Json payload; only if all matches here are successful, the payload match is considered successful",
                "type":"array",
                "minItems":0,
                "items": {
                  "type": "object",
                  "description": "One match action to be executed against the received Json payload",
                  "properties":{
                    "matchType": {
                      "type":"string",
                      "description": "Type of match action",
                      "enum": ["EqualsTo", "StartsWith", "EndsWith", "Contains"]
                    },
                    "JsonPointer": {
                      "description": "A Json pointer to locate a value within the received Json payload",
                      "type":"string"
                    },
                    "input": {
                      "description": "Content used to execute the matchType above against the value specified by the Json pointer above; the value specified by the Json pointer above should either equal to or start with or end with or contain the content specified in this field",
                      "type":"string"
                    }
                  }
                }
              }             
            }
          },
          "Response":{
            "description": "Response message to be returned in response to the request above",
            "type":"object",
            "properties":{
              "status-code": {
                "description": "status-code",
                "default": 200,
                "type": "integer"
              },
              "payload": {
                "description": "response payload",
                "type":"object",
                "properties":{
                  "msg-payload": {
                    "description": "The actual message payload. The payload can optionally contain a placeholder (name specified below) that may appear several times. For example: {'name': '$VAR', 'location': '$VAR', 'ID', '$VAR'}, here, $VAR is the placeholder. Each instance of $VAR would be replaced by an actual string as instructed by arguments field, in order of occurrance",
                    "type":"string"
                  },
                  "placeholder": {
                    "description": "A string that is embeded in msg-payload above acting as placeholders, for example, $VAR",
                    "type":"string"
                  },
                  "arguments": {
                    "description": "A list of arguments. The first argument would replace the first placeholder in msg-payload, and the second argument would replace the second placeholder, and so on. The number of arguments here should match the number of placeholder occurrances in msg-payload",
                    "type":"array",
                    "minItems":0,
                    "items": {
                      "type": "object",
                      "description": "The argument is a value from either the Json payload of the received Request, or a token from the :path header of the received Request. An optional substring action can be applied to the value",
                      "properties":{
                        "type-of-value": {
                          "description": "how to locate the value: JsonPointer means to find the value from the received Json payload with the Json pointer; TokenInPath means to locate the N-th token of the received :path header",
                          "type":"string",
                          "enum": ["JsonPointer", "TokenInPath"]
                        },
                        "value-identifier":{
                          "description": "Either a Json pointer, e.g., /name representing 'bill' in {'name': 'bill', 'location': office', 'ID', '123'}; or an index N, representing the N-th token in the :path header, with '/' as the delimeter, e.g., 1 representing imsi-111111111111111 in /imsi-111111111111111/provide-pos-info",
                          "type":"string"
                        },
                        "sub-string-start":{
                          "description": "the start position from which the substring action would pick up the substring; default: 0, meaning the start of the string",
                          "default": 0,
                          "type": "integer"
                        },
                        "sub-string-end":{
                          "description": "the end position upon which the substring action would end. The charactor at the end position is execluded. -1 means the position after the last character, thus start 0 end -1 means the whole original string",
                          "default": -1,
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "additonalHeaders":{
              "description": "additional headers to be returned. Valid format for each header: pair of strings with : in the middle; for example: Content-type: Application/json",
              "type": "array",
              "items": {
                 "type": "string"
                }
              }
            }
          }
        },
        "required":[
           "Request",
           "Response"
        ]
      }
    }
  },
  "required":[
    "Service"
  ]
}
